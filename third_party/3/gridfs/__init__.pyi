from pymongo.common import UNAUTHORIZED_CODES as UNAUTHORIZED_CODES
from pymongo.errors import OperationFailure as OperationFailure
from typing import Any, Optional

class GridFS:
    def __init__(self, database: Any, collection: str = ..., disable_md5: bool = ...) -> None: ...
    def new_file(self, **kwargs: Any): ...
    def put(self, data: Any, **kwargs: Any): ...
    def get(self, file_id: Any, session: Optional[Any] = ...): ...
    def get_version(self, filename: Optional[Any] = ..., version: int = ..., session: Optional[Any] = ..., **kwargs: Any): ...
    def get_last_version(self, filename: Optional[Any] = ..., session: Optional[Any] = ..., **kwargs: Any): ...
    def delete(self, file_id: Any, session: Optional[Any] = ...) -> None: ...
    def list(self, session: Optional[Any] = ...): ...
    def find_one(self, filter: Optional[Any] = ..., session: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def find(self, *args: Any, **kwargs: Any): ...
    def exists(self, document_or_id: Optional[Any] = ..., session: Optional[Any] = ..., **kwargs: Any): ...

class GridFSBucket:
    def __init__(self, db: Any, bucket_name: str = ..., chunk_size_bytes: Any = ..., write_concern: Optional[Any] = ..., read_preference: Optional[Any] = ..., disable_md5: bool = ...) -> None: ...
    def open_upload_stream(self, filename: Any, chunk_size_bytes: Optional[Any] = ..., metadata: Optional[Any] = ..., session: Optional[Any] = ...): ...
    def open_upload_stream_with_id(self, file_id: Any, filename: Any, chunk_size_bytes: Optional[Any] = ..., metadata: Optional[Any] = ..., session: Optional[Any] = ...): ...
    def upload_from_stream(self, filename: Any, source: Any, chunk_size_bytes: Optional[Any] = ..., metadata: Optional[Any] = ..., session: Optional[Any] = ...): ...
    def upload_from_stream_with_id(self, file_id: Any, filename: Any, source: Any, chunk_size_bytes: Optional[Any] = ..., metadata: Optional[Any] = ..., session: Optional[Any] = ...) -> None: ...
    def open_download_stream(self, file_id: Any, session: Optional[Any] = ...): ...
    def download_to_stream(self, file_id: Any, destination: Any, session: Optional[Any] = ...) -> None: ...
    def delete(self, file_id: Any, session: Optional[Any] = ...) -> None: ...
    def find(self, *args: Any, **kwargs: Any): ...
    def open_download_stream_by_name(self, filename: Any, revision: int = ..., session: Optional[Any] = ...): ...
    def download_to_stream_by_name(self, filename: Any, destination: Any, revision: int = ..., session: Optional[Any] = ...) -> None: ...
    def rename(self, file_id: Any, new_filename: Any, session: Optional[Any] = ...) -> None: ...
