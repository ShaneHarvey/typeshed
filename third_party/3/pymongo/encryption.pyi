from pymongocrypt.errors import MongoCryptError as MongoCryptError
from pymongocrypt.state_machine import MongoCryptCallback
from typing import Any, Optional

MongoCryptCallback = object

class _EncryptionIO(MongoCryptCallback):
    client_ref: Any = ...
    key_vault_coll: Any = ...
    mongocryptd_client: Any = ...
    opts: Any = ...
    def __init__(self, client: Any, key_vault_coll: Any, mongocryptd_client: Any, opts: Any) -> None: ...
    def kms_request(self, kms_context: Any) -> None: ...
    def collection_info(self, database: Any, filter: Any) -> Any: ...
    def spawn(self) -> None: ...
    def mark_command(self, database: Any, cmd: Any) -> Any: ...
    def fetch_keys(self, filter: Any) -> None: ...
    def insert_data_key(self, data_key: Any) -> Any: ...
    def bson_encode(self, doc: Any) -> Any: ...
    def close(self) -> None: ...

class _Encrypter:
    def __init__(self, io_callbacks: Any, opts: Any) -> None: ...
    def encrypt(self, database: Any, cmd: Any, check_keys: Any, codec_options: Any) -> Any: ...
    def decrypt(self, response: Any) -> Any: ...
    def close(self) -> None: ...
    @staticmethod
    def create(client: Any, opts: Any) -> Any: ...

class Algorithm:
    AEAD_AES_256_CBC_HMAC_SHA_512_Deterministic: str = ...
    AEAD_AES_256_CBC_HMAC_SHA_512_Random: str = ...

class ClientEncryption:
    def __init__(self, kms_providers: Any, key_vault_namespace: Any, key_vault_client: Any, codec_options: Any) -> None: ...
    def create_data_key(self, kms_provider: Any, master_key: Optional[Any]=..., key_alt_names: Optional[Any]=...) -> Any: ...
    def encrypt(self, value: Any, algorithm: Any, key_id: Optional[Any]=..., key_alt_name: Optional[Any]=...) -> Any: ...
    def decrypt(self, value: Any) -> Any: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def close(self) -> None: ...
