from typing import Any, Optional

from OpenSSL import SSL as _SSL

PROTOCOL_SSLv23: Any
OP_NO_SSLv2: Any
OP_NO_SSLv3: Any
OP_NO_COMPRESSION: Any
OP_NO_RENEGOTIATION: Any
HAS_SNI: bool
CHECK_HOSTNAME_SAFE: bool
IS_PYOPENSSL: bool
SSLError: Any

class _sslConn(_SSL.Connection):
    socket_checker: Any = ...
    suppress_ragged_eofs: Any = ...
    def __init__(self, ctx: Any, sock: Any, suppress_ragged_eofs: Any) -> None: ...
    def do_handshake(self, *args: Any, **kwargs: Any) -> Any: ...
    def recv(self, *args: Any, **kwargs: Any) -> Any: ...
    def recv_into(self, *args: Any, **kwargs: Any) -> Any: ...
    def sendall(self, buf: Any, flags: int = ...) -> None: ...

class _CallbackData:
    trusted_ca_certs: Any = ...
    check_ocsp_endpoint: Any = ...
    ocsp_response_cache: Any = ...
    def __init__(self) -> None: ...

class SSLContext:
    def __init__(self, protocol: Any) -> None: ...
    @property
    def protocol(self): ...
    verify_mode: Any = ...
    check_hostname: Any = ...
    check_ocsp_endpoint: Any = ...
    options: Any = ...
    def load_cert_chain(self, certfile: Any, keyfile: Optional[Any] = ..., password: Optional[Any] = ...) -> Any: ...
    def load_verify_locations(self, cafile: Optional[Any] = ..., capath: Optional[Any] = ...) -> None: ...
    def set_default_verify_paths(self) -> None: ...
    def wrap_socket(
        self,
        sock: Any,
        server_side: bool = ...,
        do_handshake_on_connect: bool = ...,
        suppress_ragged_eofs: bool = ...,
        server_hostname: Optional[Any] = ...,
        session: Optional[Any] = ...,
    ) -> Any: ...
